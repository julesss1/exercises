{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 LucidaGrande;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red11\green96\blue192;\red0\green0\blue0;\red26\green26\blue26;
\red255\green255\blue255;\red10\green0\blue109;\red26\green26\blue26;\red255\green255\blue255;\red27\green29\blue31;
\red0\green68\blue254;\red15\green112\blue1;\red0\green0\blue255;\red83\green83\blue83;\red158\green0\blue49;
\red0\green0\blue0;\red38\green38\blue38;\red83\green83\blue83;\red46\green111\blue253;\red169\green14\blue26;
\red27\green29\blue31;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c46667\c80000;\cssrgb\c0\c0\c0;\cssrgb\c13333\c13333\c13333;
\cssrgb\c100000\c100000\c100000;\cssrgb\c4314\c0\c50196;\cssrgb\c13333\c13333\c13333;\csgenericrgb\c100000\c100000\c100000;\cssrgb\c14118\c15294\c16078;
\csgenericrgb\c0\c26667\c99608;\cssrgb\c0\c50196\c0;\cssrgb\c0\c0\c100000;\cssrgb\c40000\c40000\c40000;\cssrgb\c69020\c0\c25098;
\csgenericrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c40000\c40000\c40000;\csgenericrgb\c18039\c43529\c99216;\cssrgb\c72941\c12941\c12941;
\cssrgb\c14118\c15294\c16078;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww25340\viewh13540\viewkind0
\deftab720
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\f0\b\fs28 \cf2 \expnd0\expndtw0\kerning0
Question1:\cf3 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b0 \cf3  (a) Briefly describe the Strategy Design Pattern?\uc0\u8232 	\cf4 \cb5 \outl0\strokewidth0 \strokec4 the 
\b strategy pattern
\b0  (also known as the 
\b policy pattern
\b0 ) is a behavioral software design pattern that enables an algorithm\'92s behavior to be selected at runtime. The strategy pattern\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl320\sa28\partightenfactor0
\ls1\ilvl1\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 defines a family of algorithms,\cb1 \
\ls1\ilvl1\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 encapsulates each algorithm, and\cb1 \
\ls1\ilvl1\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 makes the algorithms interchangeable within that family.\cb1 \
\pard\pardeftab720\sl320\sa140\partightenfactor0
\cf4 \cb5 	Strategy lets the algorithm vary independently from clients that use it.\cf6 \super \strokec6 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf3 \cb1 \nosupersub \outl0\strokewidth0 \
(b) When is it appropriate to use the Strategy Design Pattern? \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa240\partightenfactor0
\ls2\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
Strategy pattern is useful in situations where behavior of classes needs to be changed.  Strategy provides ways to create classes with one of many behaviors\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u9642 	}When you need different variants of algorithm. \expnd0\expndtw0\kerning0
So it\'92s good to use Strategy pattern where you can \cf7 \cb8 isolate the algorithms in separate classes in order to have the ability to select different algorithms at runtime. \
\ls2\ilvl0\cf9 \cb1 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9642 	}When your algorithm\'92s complexity and data shouldn\'92t be exposed to clients\expnd0\expndtw0\kerning0
 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\b \cf2 Question2:\
\pard\pardeftab720\sl300\partightenfactor0

\b0 \cf10 package strategy\
trait TextFormatter \{\
  def format(text: String)\
\pard\pardeftab720\sl300\sa240\partightenfactor0
\cf10 \} \cf15 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf15 The above interface contains only one method, format, used to format the text. \
\pard\pardeftab720\sl300\partightenfactor0
\cf15 \
\cf10 package strategy\
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0
\cf10 class CapTextFormatter extends TextFormatter \{\
  override def format(text: String): Unit = \{\
    println("[CapTextFormatter]: " + text.toUpperCase())\
  \}\
\}\cf15 \
\pard\pardeftab720\sl360\partightenfactor0
\cf15 \cb5 \outl0\strokewidth0 \strokec16 The above class, \strokec17 CapTextFormatter\strokec16 , is a concrete text formatter that implements the \strokec17 TextFormatter\strokec16  interface and the class is used to change the text into capital case.\cb1 \outl0\strokewidth0 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0
\cf18 \
\pard\pardeftab720\sl300\partightenfactor0
\cf10 package strategy\
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0
\cf10 class LowerTextFormatter extends TextFormatter \{\
  override def format(text: String): Unit = \{\
    println("[LowerTextFormatter]: " + text.toLowerCase())\
  \}\
\}\cf15 \
\pard\pardeftab720\sl360\partightenfactor0
\cf15 \cb5 \outl0\strokewidth0 \strokec16 The \strokec17 LowerTextFormatter\strokec16  is a concrete text formatter that implements the \strokec17 TextFormatter\strokec16  interface and the class is used to change the text into small case.\cb1 \outl0\strokewidth0 \
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf10 package strategy\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 class TextEditor(private val textFormatter: TextFormatter) \{\
\
  def publishText(text: String): Unit = \{\
    textFormatter.format(text)\
  \}\
\}\cf15 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf15 \cb5 \outl0\strokewidth0 \strokec16 The above class is the \strokec17 TextEditor\strokec16  class which holds a reference to the \strokec17 TextFormatter\strokec16  interface. The class contains the \strokec17 publishText\strokec16  method which forwards the text to the formatter in order to publish the text in desired format.\
\
\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf15 \cb1 \outl0\strokewidth0 Some sample test code might look like: \
\pard\pardeftab720\sl300\partightenfactor0
\cf10 package strategy\
object TestStrategyPattern extends App \{\
  var formatter: TextFormatter = CapTextFormatter()\
  var editor: TextEditor = TextEditor(formatter)\
  editor.publishText("Testing text in caps formatter")\
  formatter = LowerTextFormatter()\
  editor = TextEditor(formatter)\
  editor.publishText("Testing text in lower formatter")\
\pard\pardeftab720\sl300\sa240\partightenfactor0
\cf10 \} \cf15 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf15 The above code will result to the following output: \
\pard\pardeftab720\sl300\partightenfactor0
\cf15    [CapTextFormatter]: TESTING TEXT IN CAPS FORMATTER\
   [LowerTextFormatter]: testing text in lower formatter
\f2\fs26\fsmilli13333 \cf3 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs24 \cf3 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\f0\b\fs28 \cf2 Question3:\
\pard\pardeftab720\sl340\partightenfactor0

\b0\fs30 \cf20 \cb8 \outl0\strokewidth0 \strokec20 	Abstract Factory Provides an interface for creating families of related or dependent objects without specifying their concrete classes.\
	It\'92s appropriate to use this design pattern when you want to decouple client from implementation details of concrete classes. Client doesn\'92t know about the implementation details, it only uses the implementation at runtime\
	\cb5 You need abstract factory when different polymorphic classes has different instantiation procedure. And you want some module to create instances and use them, without knowing any details of object initialization\
	You need to use factory pattern whenever you want to control the initialization of your objects, instead of giving the control to the consumer.\
\
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\b\fs28 \cf2 \cb1 \outl0\strokewidth0 Question5:\
	
\b0 \cf15 This type of design actually couples the object creation process with the components that make the object. This is suitable only when the object being created is simple and object creation process is definite and produces the same representation of the object. But this approach is less effective when the object being created is complex and a series of object creation steps is implemented in different ways producing different representation of object. Because all the different object creation processes are kept within object so it becomes construction bloat and less modular. \
	Using the Builder pattern, the process of constructing such an object can be designed more effectively. Because builder pattern suggests moving the construction logic out of the object class to a separate class referred to as a 
\b Builder
\b0 . There can be such builder classes with different implementation that result in different object representation. This type of separation reduces the object size.\
\

\b \cf2 Question7:\
(a)
\b0 \cf15  \cf21 \outl0\strokewidth0 \strokec21 Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to existing system to hide its complexities. This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes.\

\b \cf2 \outl0\strokewidth0 (b) 	When:\
	   
\f1\b0\fs30 \cf9 \cb22 \kerning1\expnd0\expndtw0 \uc0\u8259 
\f0 \cf20 \cb5 	\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 A simple interface is required to access a complex system.\cb1 \
	   
\f1 \cf9 \cb22 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \uc0\u8259    
\f0 \cf20 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 The abstractions and implementations of a subsystem are tightly coupled.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\sa150\partightenfactor0
\ls3\ilvl1\cf20 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 Need an entry point to each level of layered software.\cb1 \
\ls3\ilvl1\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 System is very complex or difficult to understand.\cb1 \
\pard\tx720\tx1440\pardeftab720\sl340\sa150\partightenfactor0

\b\fs28 \cf2 \outl0\strokewidth0 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0
\cf2 	Why:\
		
\b0 \cf15 The Facade pattern is used when the system is very complex and difficult to understand because it has much interdependent classes or source code is unavailable. This pattern hides the complexities of the system and provides simpler interface.\
\

\b \cf2 Question7:
\b0\fs30 \cf20 \cb5 \outl0\strokewidth0 \strokec20 \
	
\fs28 Bridge is structural pattern\cb1 . \cb5 Use the Bridge pattern when:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\sa150\partightenfactor0
\ls4\ilvl1\cf20 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 you want run-time binding of the implementation,\cb1 \
\ls4\ilvl1\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 you have a large number of classes resulting from a coupled interface and numerous implementations,\cb1 \
\ls4\ilvl1\cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 you want to share an implementation among multiple objects,\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\partightenfactor0
\ls4\ilvl1\cf20 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u8259 
\f0 	}\cf21 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec21 Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently. Bridge pattern decouples implementation class and abstract class by providing a bridge structure between them.\
\pard\tx720\tx1440\pardeftab720\sl340\partightenfactor0
\cf3 \cb1 \outl0\strokewidth0 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\b \cf2 Question11:\
(a)
\b0 \cf3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls5\ilvl0\cf21 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec21 Composite pattern is used where we need to treat a group of objects in similar way as a single object\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec21 Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec21 This type of design pattern comes under structural pattern as this pattern creates a tree structure of group of objects\cf3 \cb1 \outl0\strokewidth0 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\b \cf2 (b)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa240\partightenfactor0
\ls6\ilvl0
\b0 \cf20 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9642 	}When \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 you want to represent part-whole hierarchies of objects\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}When \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 you want clients to be able to ignore the difference between compositions of objects and individual objects. Clients will treat all objects in the composite structure uniformly\
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0

\b \cf2 \outl0\strokewidth0 (c)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa240\partightenfactor0
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\b0 \cf15 1.
\b \cf2 	}\cf15 \expnd0\expndtw0\kerning0
Component
\b0 : 	\cf21 \outl0\strokewidth0 \strokec21 Declares the interface for objects in the composition\cf15 \outl0\strokewidth0 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}
\b \expnd0\expndtw0\kerning0
Leaf
\b0 : 		\cf21 \outl0\strokewidth0 \strokec21 Represents leaf objects in the composition; defines the primitive behavior\cf15 \outl0\strokewidth0 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}
\b \expnd0\expndtw0\kerning0
Composite
\b0 :	\cf21 \outl0\strokewidth0 \strokec21 Stores children / composite behavior\cf15 \outl0\strokewidth0 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}
\b \expnd0\expndtw0\kerning0
Client
\b0 :		\cf21 \outl0\strokewidth0 \strokec21 Accesses objects in the composition via Component interface\cf2 \outl0\strokewidth0 \
\pard\tx720\pardeftab720\sl360\sa240\partightenfactor0
\cf3 \
}